<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EveryMinute" xml:space="preserve">
    <value>toutes les minutes</value>
  </data>
  <data name="EveryHour" xml:space="preserve">
    <value>toutes les heures</value>
    <comment>EveryHour description</comment>
  </data>
  <data name="AnErrorOccuredWhenGeneratingTheExpressionD" xml:space="preserve">
    <value>Une erreur est survenue en générant la description de l'expression cron. Vérifiez sa syntaxe.</value>
    <comment>AnErrorOccuredWhenGeneratingTheExpressionD description</comment>
  </data>
  <data name="AtSpace" xml:space="preserve">
    <value>À </value>
    <comment>At description</comment>
  </data>
  <data name="EveryMinuteBetweenX0AndX1" xml:space="preserve">
    <value>Toutes les minutes entre {0} et {1}</value>
    <comment>EveryMinuteBetweenX0AndX1 description</comment>
  </data>
  <data name="At" xml:space="preserve">
    <value>À</value>
    <comment>At description</comment>
  </data>
  <data name="SpaceAnd" xml:space="preserve">
    <value> et</value>
    <comment>And description</comment>
  </data>
  <data name="EverySecond" xml:space="preserve">
    <value>toutes les secondes</value>
    <comment>EverySecond description</comment>
  </data>
  <data name="EveryX0Seconds" xml:space="preserve">
    <value>toutes les {0} secondes</value>
    <comment>EveryX0Seconds description</comment>
  </data>
  <data name="SecondsX0ThroughX1PastTheMinute" xml:space="preserve">
    <value>les secondes entre {0} et {1} après la minute</value>
    <comment>SecondsX0ThroughX1PastTheMinute description</comment>
  </data>
  <data name="AtX0SecondsPastTheMinute" xml:space="preserve">
    <value>{0} secondes après la minute</value>
    <comment>AtX0SecondsPastTheMinute description</comment>
  </data>
  <data name="EveryX0Minutes" xml:space="preserve">
    <value>toutes les {0} minutes</value>
    <comment>EveryX0Minutes description</comment>
  </data>
  <data name="MinutesX0ThroughX1PastTheHour" xml:space="preserve">
    <value>les minutes entre {0} et {1} après l'heure</value>
    <comment>MinutesX0ThroughX1PastTheHour description</comment>
  </data>
  <data name="AtX0MinutesPastTheHour" xml:space="preserve">
    <value>{0} minutes après l'heure</value>
    <comment>AtX0MinutesPastTheHour description</comment>
  </data>
  <data name="EveryX0Hours" xml:space="preserve">
    <value>toutes les {0} heures</value>
    <comment>EveryX0Hours description</comment>
  </data>
  <data name="BetweenX0AndX1" xml:space="preserve">
    <value>de {0} à {1}</value>
    <comment>BetweenX0AndX1 description</comment>
  </data>
  <data name="AtX0" xml:space="preserve">
    <value>à {0}</value>
    <comment>AtX0 description</comment>
  </data>
  <data name="ComaEveryDay" xml:space="preserve">
    <value>, tous les jours</value>
    <comment>ComaEveryDay description</comment>
  </data>
  <data name="ComaEveryX0DaysOfTheWeek" xml:space="preserve">
    <value>, every {0} days of the week</value>
    <comment>EveryX0DaysOfTheWeek description</comment>
  </data>
  <data name="ComaX0ThroughX1" xml:space="preserve">
    <value>, de {0} à {1}</value>
    <comment>X0ThroughX1 description</comment>
  </data>
  <data name="First" xml:space="preserve">
    <value>premier</value>
    <comment>First description</comment>
  </data>
  <data name="Second" xml:space="preserve">
    <value>second</value>
    <comment>Second description</comment>
  </data>
  <data name="Third" xml:space="preserve">
    <value>troisième</value>
    <comment>Third description</comment>
  </data>
  <data name="Forth" xml:space="preserve">
    <value>quatrième</value>
    <comment>Forth description</comment>
  </data>
  <data name="Fifth" xml:space="preserve">
    <value>cinquième</value>
    <comment>Fifth description</comment>
  </data>
  <data name="ComaOnThe" xml:space="preserve">
    <value>, le </value>
    <comment>OnThe description</comment>
  </data>
  <data name="SpaceX0OfTheMonth" xml:space="preserve">
    <value> {0} du mois</value>
    <comment>X0OfTheMonth description</comment>
  </data>
  <data name="ComaOnTheLastX0OfTheMonth" xml:space="preserve">
    <value>, le dernier {0} du mois</value>
    <comment>OnTheLastX0OfTheMonth description</comment>
  </data>
  <data name="ComaOnlyOnX0" xml:space="preserve">
    <value>, uniquement le {0}</value>
    <comment>OnlyOnX0 description</comment>
  </data>
  <data name="ComaEveryX0Months" xml:space="preserve">
    <value>, tous les {0} mois</value>
    <comment>EveryX0Months description</comment>
  </data>
  <data name="ComaOnlyInX0" xml:space="preserve">
    <value>, uniquement en {0}</value>
    <comment>ComaOnlyInX0 description</comment>
  </data>
  <data name="ComaOnTheLastDayOfTheMonth" xml:space="preserve">
    <value>, le dernier jour du mois</value>
    <comment>ComaOnTheLastDayOfTheMonth description</comment>
  </data>
  <data name="ComaOnTheLastWeekdayOfTheMonth" xml:space="preserve">
    <value>, le dernier jour ouvrable du mois</value>
    <comment>OnTheLastWeekdayOfTheMonth description</comment>
  </data>
  <data name="FirstWeekday" xml:space="preserve">
    <value>premier jour ouvrable</value>
    <comment>FirstWeekday description</comment>
  </data>
  <data name="WeekdayNearestDayX0" xml:space="preserve">
    <value>jour ouvrable le plus proche du {0}</value>
    <comment>WeekdayNearestDayX0 description</comment>
  </data>
  <data name="ComaOnTheX0OfTheMonth" xml:space="preserve">
    <value>, le {0} du mois</value>
    <comment>ComaOnTheX0OfTheMonth description</comment>
  </data>
  <data name="ComaEveryX0Days" xml:space="preserve">
    <value>, tous les {0} jours</value>
    <comment>ComaEveryX0Days description</comment>
  </data>
  <data name="ComaBetweenDayX0AndX1OfTheMonth" xml:space="preserve">
    <value>, du {0} au {1} du mois</value>
    <comment>BetweenDayX0AndX1OfTheMonth description</comment>
  </data>
  <data name="ComaOnDayX0OfTheMonth" xml:space="preserve">
    <value>, le {0} du mois</value>
    <comment>ComaOnDayX0OfTheMonth description</comment>
  </data>
  <data name="SpaceAndSpace" xml:space="preserve">
    <value> et </value>
    <comment>And description</comment>
  </data>
  <data name="ComaEveryMinute" xml:space="preserve">
    <value>, toutes les minutes</value>
    <comment>ComaEveryMinute1 description</comment>
  </data>
  <data name="ComaEveryHour" xml:space="preserve">
    <value>, toutes les heures</value>
    <comment>ComaEveryHour description</comment>
  </data>
  <data name="ComaEveryX0Years" xml:space="preserve">
    <value>, tous les {0} ans</value>
    <comment>ComaEveryX0Years description</comment>
  </data>
  <data name="ComaDaysX0ThroughX1" xml:space="preserve">
    <value>, du {0} au {1}</value>
    <comment>ComaDaysX0ThroughX1 description</comment>
  </data>
  <data name="WeekSpaceAndSpace" xml:space="preserve">
    <value> et le </value>
    <comment>WeekSpaceAndSpace description</comment>
  </data>
</root>